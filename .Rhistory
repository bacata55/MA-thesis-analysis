breaks <- filter(df, group == groups[i])
# get the name of the type
senti_name <- groups[i]
# get the correct columns from the loess df, supplied as an argument to the function
data <- cbind(loessed["date"], loessed[senti_name])
break_len <- length(breaks[[1]])
# Case #1: 2 breaks, 3 regimes
if (break_len == 2) {
data1 <- filter(data, date < breaks[1,1])
mean1 <- mean(unlist(data1[senti_name]))
data2 <- filter(data, date >= breaks[1,1], date < breaks[2,1])
mean2 <- mean(unlist(data2[senti_name]))
data3 <- filter(data, date >= breaks[2,1])
mean3 <- mean(unlist(data3[senti_name]))
means <- c(mean1, mean2, mean3)
}
# Case #2: only 1 break, 2 regimes
else {
data1 <- filter(data, date < breaks[1,1])
mean1 <- mean(unlist(data1[senti_name]))
data2 <- filter(data, date >= breaks[1,1])
mean2 <- mean(unlist(data2[senti_name]))
means <- c(mean1, mean2)
}
listofmeans[[i]] <- means
}
breaks_and_list <- list(listofmeans, groups)
return(breaks_and_list)
}
calculate_breakmeans(FARC_breaks_df, FARC_results)
calculate_breakmeans(FARC_breaks_df, FARC_results)
calculate_breakmeans(govt_breaks_df, govt_results)
calculate_breakmeans(joint_breaks_df, joint_results)
calculate_breakmeans <- function(df, loessed) {
# need to rename groups so they match up with columns in the loess df
df$group <- gsub("neg_break", "EmoNeg", df$group)
df$group <- gsub("pos_break", "EmoPos", df$group)
df$group <- gsub("pp3_break", "Ellos", df$group)
df$group <- gsub("death_break", "Muerte", df$group)
# which types of sentiment have breaks?
groups <- distinct(df, group)$group
# list to contain the means for each sentiment
listofmeans <- vector("list", length(groups))
# for each type of sentiment
for (i in 1:length(groups)) {
# get the breakdates for that type
breaks <- filter(df, group == groups[i])
# get the name of the type
senti_name <- groups[i]
# get the correct columns from the loess df, supplied as an argument to the function
data <- cbind(loessed["date"], loessed[senti_name])
# number of structural breaks
break_len <- length(breaks[[1]])
# IDs to return
IDs <- c(breaks, senti_name)
# Case #1: 2 breaks, 3 regimes
if (break_len == 2) {
data1 <- filter(data, date < breaks[1,1])
mean1 <- mean(unlist(data1[senti_name]))
data2 <- filter(data, date >= breaks[1,1], date < breaks[2,1])
mean2 <- mean(unlist(data2[senti_name]))
data3 <- filter(data, date >= breaks[2,1])
mean3 <- mean(unlist(data3[senti_name]))
means <- c(mean1, mean2, mean3)
}
# Case #2: only 1 break, 2 regimes
else {
data1 <- filter(data, date < breaks[1,1])
mean1 <- mean(unlist(data1[senti_name]))
data2 <- filter(data, date >= breaks[1,1])
mean2 <- mean(unlist(data2[senti_name]))
means <- c(mean1, mean2)
}
listofmeans[[i]] <- c(means, IDs)
}
return(listofmeans)
}
calculate_breakmeans(FARC_breaks_df, FARC_results)
calculate_breakmeans <- function(df, loessed) {
# need to rename groups so they match up with columns in the loess df
df$group <- gsub("neg_break", "EmoNeg", df$group)
df$group <- gsub("pos_break", "EmoPos", df$group)
df$group <- gsub("pp3_break", "Ellos", df$group)
df$group <- gsub("death_break", "Muerte", df$group)
# which types of sentiment have breaks?
groups <- distinct(df, group)$group
# list to contain the means for each sentiment
listofmeans <- vector("list", length(groups))
# for each type of sentiment
for (i in 1:length(groups)) {
# get the breakdates for that type
breaks <- filter(df, group == groups[i])
# get the name of the type
senti_name <- groups[i]
# get the correct columns from the loess df, supplied as an argument to the function
data <- cbind(loessed["date"], loessed[senti_name])
# number of structural breaks
break_len <- length(breaks[[1]])
# IDs to return
IDs <- c(breaks["date"], senti_name)
# Case #1: 2 breaks, 3 regimes
if (break_len == 2) {
data1 <- filter(data, date < breaks[1,1])
mean1 <- mean(unlist(data1[senti_name]))
data2 <- filter(data, date >= breaks[1,1], date < breaks[2,1])
mean2 <- mean(unlist(data2[senti_name]))
data3 <- filter(data, date >= breaks[2,1])
mean3 <- mean(unlist(data3[senti_name]))
means <- c(mean1, mean2, mean3)
}
# Case #2: only 1 break, 2 regimes
else {
data1 <- filter(data, date < breaks[1,1])
mean1 <- mean(unlist(data1[senti_name]))
data2 <- filter(data, date >= breaks[1,1])
mean2 <- mean(unlist(data2[senti_name]))
means <- c(mean1, mean2)
}
listofmeans[[i]] <- c(means, IDs)
}
return(listofmeans)
}
calculate_breakmeans(FARC_breaks_df, FARC_results)
calculate_breakmeans <- function(df, loessed) {
# need to rename groups so they match up with columns in the loess df
df$group <- gsub("neg_break", "EmoNeg", df$group)
df$group <- gsub("pos_break", "EmoPos", df$group)
df$group <- gsub("pp3_break", "Ellos", df$group)
df$group <- gsub("death_break", "Muerte", df$group)
# which types of sentiment have breaks?
groups <- distinct(df, group)$group
# list to contain the means for each sentiment
listofmeans <- vector("list", length(groups))
# for each type of sentiment
for (i in 1:length(groups)) {
# get the breakdates for that type
breaks <- filter(df, group == groups[i])
# get the name of the type
senti_name <- groups[i]
# get the correct columns from the loess df, supplied as an argument to the function
data <- cbind(loessed["date"], loessed[senti_name])
# number of structural breaks
break_len <- length(breaks[[1]])
# IDs to return
IDs <- list(breaks["date"], senti_name)
# Case #1: 2 breaks, 3 regimes
if (break_len == 2) {
data1 <- filter(data, date < breaks[1,1])
mean1 <- mean(unlist(data1[senti_name]))
data2 <- filter(data, date >= breaks[1,1], date < breaks[2,1])
mean2 <- mean(unlist(data2[senti_name]))
data3 <- filter(data, date >= breaks[2,1])
mean3 <- mean(unlist(data3[senti_name]))
means <- c(mean1, mean2, mean3)
}
# Case #2: only 1 break, 2 regimes
else {
data1 <- filter(data, date < breaks[1,1])
mean1 <- mean(unlist(data1[senti_name]))
data2 <- filter(data, date >= breaks[1,1])
mean2 <- mean(unlist(data2[senti_name]))
means <- c(mean1, mean2)
}
listofmeans[[i]] <- c(means, IDs)
}
return(listofmeans)
}
#################################################################################
#################################################################################
calculate_breakmeans(FARC_breaks_df, FARC_results)
calculate_breakmeans <- function(df, loessed) {
# need to rename groups so they match up with columns in the loess df
df$group <- gsub("neg_break", "EmoNeg", df$group)
df$group <- gsub("pos_break", "EmoPos", df$group)
df$group <- gsub("pp3_break", "Ellos", df$group)
df$group <- gsub("death_break", "Muerte", df$group)
# which types of sentiment have breaks?
groups <- distinct(df, group)$group
# list to contain the means for each sentiment
listofmeans <- vector("list", length(groups))
# for each type of sentiment
for (i in 1:length(groups)) {
# get the breakdates for that type
breaks <- filter(df, group == groups[i])
# get the name of the type
senti_name <- groups[i]
# get the correct columns from the loess df, supplied as an argument to the function
data <- cbind(loessed["date"], loessed[senti_name])
# number of structural breaks
break_len <- length(breaks[[1]])
# IDs to return
IDs <- list(senti_name, breaks["date"])
# Case #1: 2 breaks, 3 regimes
if (break_len == 2) {
data1 <- filter(data, date < breaks[1,1])
mean1 <- mean(unlist(data1[senti_name]))
data2 <- filter(data, date >= breaks[1,1], date < breaks[2,1])
mean2 <- mean(unlist(data2[senti_name]))
data3 <- filter(data, date >= breaks[2,1])
mean3 <- mean(unlist(data3[senti_name]))
means <- c(mean1, mean2, mean3)
}
# Case #2: only 1 break, 2 regimes
else {
data1 <- filter(data, date < breaks[1,1])
mean1 <- mean(unlist(data1[senti_name]))
data2 <- filter(data, date >= breaks[1,1])
mean2 <- mean(unlist(data2[senti_name]))
means <- c(mean1, mean2)
}
listofmeans[[i]] <- c(means, IDs)
}
return(listofmeans)
}
#################################################################################
#################################################################################
calculate_breakmeans(FARC_breaks_df, FARC_results)
calculate_breakmeans <- function(df, loessed) {
# need to rename groups so they match up with columns in the loess df
df$group <- gsub("neg_break", "EmoNeg", df$group)
df$group <- gsub("pos_break", "EmoPos", df$group)
df$group <- gsub("pp3_break", "Ellos", df$group)
df$group <- gsub("death_break", "Muerte", df$group)
# which types of sentiment have breaks?
groups <- distinct(df, group)$group
# list to contain the means for each sentiment
listofmeans <- vector("list", length(groups))
# for each type of sentiment
for (i in 1:length(groups)) {
# get the breakdates for that type
breaks <- filter(df, group == groups[i])
# get the name of the type
senti_name <- groups[i]
# get the correct columns from the loess df, supplied as an argument to the function
data <- cbind(loessed["date"], loessed[senti_name])
# number of structural breaks
break_len <- length(breaks[[1]])
# IDs to return
IDs <- list(senti_name, breaks["date"])
# Case #1: 2 breaks, 3 regimes
if (break_len == 2) {
data1 <- filter(data, date < breaks[1,1])
mean1 <- mean(unlist(data1[senti_name]))
data2 <- filter(data, date >= breaks[1,1], date < breaks[2,1])
mean2 <- mean(unlist(data2[senti_name]))
data3 <- filter(data, date >= breaks[2,1])
mean3 <- mean(unlist(data3[senti_name]))
means <- list(mean1, mean2, mean3)
}
# Case #2: only 1 break, 2 regimes
else {
data1 <- filter(data, date < breaks[1,1])
mean1 <- mean(unlist(data1[senti_name]))
data2 <- filter(data, date >= breaks[1,1])
mean2 <- mean(unlist(data2[senti_name]))
means <- list(mean1, mean2)
}
listofmeans[[i]] <- c(means, IDs)
}
return(listofmeans)
}
calculate_breakmeans(FARC_breaks_df, FARC_results)
calculate_breakmeans <- function(df, loessed) {
# need to rename groups so they match up with columns in the loess df
df$group <- gsub("neg_break", "EmoNeg", df$group)
df$group <- gsub("pos_break", "EmoPos", df$group)
df$group <- gsub("pp3_break", "Ellos", df$group)
df$group <- gsub("death_break", "Muerte", df$group)
# which types of sentiment have breaks?
groups <- distinct(df, group)$group
# list to contain the means for each sentiment
listofmeans <- vector("list", length(groups))
# for each type of sentiment
for (i in 1:length(groups)) {
# get the breakdates for that type
breaks <- filter(df, group == groups[i])
# get the name of the type
senti_name <- groups[i]
# get the correct columns from the loess df, supplied as an argument to the function
data <- cbind(loessed["date"], loessed[senti_name])
# number of structural breaks
break_len <- length(breaks[[1]])
# IDs to return
IDs <- list(senti_name, breaks["date"])
# Case #1: 2 breaks, 3 regimes
if (break_len == 2) {
data1 <- filter(data, date < breaks[1,1])
mean1 <- mean(unlist(data1[senti_name]))
data2 <- filter(data, date >= breaks[1,1], date < breaks[2,1])
mean2 <- mean(unlist(data2[senti_name]))
data3 <- filter(data, date >= breaks[2,1])
mean3 <- mean(unlist(data3[senti_name]))
means <- list(mean1, mean2, mean3)
}
# Case #2: only 1 break, 2 regimes
else {
data1 <- filter(data, date < breaks[1,1])
mean1 <- mean(unlist(data1[senti_name]))
data2 <- filter(data, date >= breaks[1,1])
mean2 <- mean(unlist(data2[senti_name]))
means <- list(mean1, mean2)
}
listofmeans[[i]] <- list(means, IDs)
}
return(listofmeans)
}
calculate_breakmeans(FARC_breaks_df, FARC_results)
calculate_breakmeans <- function(df, loessed) {
# need to rename groups so they match up with columns in the loess df
df$group <- gsub("neg_break", "EmoNeg", df$group)
df$group <- gsub("pos_break", "EmoPos", df$group)
df$group <- gsub("pp3_break", "Ellos", df$group)
df$group <- gsub("death_break", "Muerte", df$group)
# which types of sentiment have breaks?
groups <- distinct(df, group)$group
# list to contain the means for each sentiment
listofmeans <- vector("list", length(groups))
# for each type of sentiment
for (i in 1:length(groups)) {
# get the breakdates for that type
breaks <- filter(df, group == groups[i])
# get the name of the type
senti_name <- groups[i]
# get the correct columns from the loess df, supplied as an argument to the function
data <- cbind(loessed["date"], loessed[senti_name])
# number of structural breaks
break_len <- length(breaks[[1]])
# IDs to return
IDs <- list(senti_name, breaks["date"])
# Case #1: 2 breaks, 3 regimes
if (break_len == 2) {
data1 <- filter(data, date < breaks[1,1])
mean1 <- mean(unlist(data1[senti_name]))
data2 <- filter(data, date >= breaks[1,1], date < breaks[2,1])
mean2 <- mean(unlist(data2[senti_name]))
data3 <- filter(data, date >= breaks[2,1])
mean3 <- mean(unlist(data3[senti_name]))
means <- c(mean1, mean2, mean3)
}
# Case #2: only 1 break, 2 regimes
else {
data1 <- filter(data, date < breaks[1,1])
mean1 <- mean(unlist(data1[senti_name]))
data2 <- filter(data, date >= breaks[1,1])
mean2 <- mean(unlist(data2[senti_name]))
means <- c(mean1, mean2)
}
listofmeans[[i]] <- list(means, IDs)
}
return(listofmeans)
}
#################################################################################
#################################################################################
calculate_breakmeans(FARC_breaks_df, FARC_results)
FARC_means <- calculate_breakmeans(FARC_breaks_df, FARC_results)
govt_means <- calculate_breakmeans(govt_breaks_df, govt_results)
joint_means <- calculate_breakmeans(joint_breaks_df, joint_results)
FARC_means[1]
FARC_means[1][1]
FARC_means[1][1][1]
FARC_means[[1]]
FARC_means[[1]][[1]]
FARC_means[[1]][[2]]
FARC_means
pos_breaks
pos_breaks_gg
View(pp3_breaks)
ellos_breaks_gg <- base_ellos +
ggtitle("Breakpoints in Use of 3rd Person Pl. Pronoun") +
geom_vline(data = filter(pp3_breaks, group == "govt"), mapping = aes(xintercept = as.numeric(date), color = "Govt statement"), linetype = 2)
ellos_breaks_gg
View(death_breaks)
View(death_breaks)
base_death = ggplot(FARC_results, aes(x = as.Date(date, origin = "1970-01-01"), y = Muerte, color = "FARC statement")) +
geom_smooth(method = "loess", se = FALSE) +
geom_jitter() +
geom_point(data = joint_results, aes(x = as.Date(date, origin = "1970-01-01"), y = Muerte, color = "Joint statement")) +
geom_smooth(method = "loess", se = FALSE, data = joint_results, aes(x = as.Date(date, origin = "1970-01-01"), y = Muerte, color = "Joint statement")) +
geom_point(data = govt_results, aes(x = as.Date(date, origin = "1970-01-01"), y = Muerte, color = "Govt statement")) +
geom_smooth(method = "loess", se = FALSE, data = govt_results, aes(x = as.Date(date, origin = "1970-01-01"), y = Muerte, color = "Govt statement")) +
labs(
x = "Date",
y = "Percent on Death",
color = "Legend") +
scale_x_date(date_minor_breaks = "1 month",
limits = c(as.Date("2012-06-01", "%Y-%m-%d"), NA))
base_death
death_breaks_gg <- base_death +
ggtitle("Breakpoints in Death") +
geom_vline(data = filter(death_breaks, group == "FARC"), mapping = aes(xintercept = as.numeric(date), color = "FARC statement"), linetype = 2) +
geom_vline(data = filter(death_breaks, group == "joint"), mapping = aes(xintercept = as.numeric(date), color = "Joint statement"), linetype = 3) # no govt breakpoints
death_breaks_gg
neg_breaks_gg
pos_breaks_gg
ellos_breaks_gg
death_breaks_gg
FARC_means <- calculate_breakmeans(FARC_breaks_df, FARC_results)
FARC_means
govt_means
FARC_means
govt_means
joint_means
viol_breaks_gg
viol_breaks
viol_breaks_list
monthly_viol
calculate_viol_breakmeans <- function(df, loessed) {
# which types of sentiment have breaks?
groups <- distinct(df, group)$group
# list to contain the means for each sentiment
listofmeans <- vector("list", length(groups))
# for each type of sentiment
for (i in 1:length(groups)) {
# get the breakdates for that type
breaks <- filter(df, group == groups[i])
# get the name of the type
senti_name <- groups[i]
# get the correct columns from the loess df, supplied as an argument to the function
data <- cbind(loessed["date"], loessed[senti_name])
# number of structural breaks
break_len <- length(breaks[[1]])
# IDs to return
IDs <- list(senti_name, breaks["date"])
# 2 breaks, 3 regimes
if (break_len == 2) {
data1 <- filter(data, date < breaks[1,1])
mean1 <- mean(unlist(data1[senti_name]))
data2 <- filter(data, date >= breaks[1,1], date < breaks[2,1])
mean2 <- mean(unlist(data2[senti_name]))
data3 <- filter(data, date >= breaks[2,1])
mean3 <- mean(unlist(data3[senti_name]))
means <- c(mean1, mean2, mean3)
}
listofmeans[[i]] <- list(IDs, means)
}
return(listofmeans)
}
calculate_viol_breakmeans(viol_breaks_list, monthly_viol)
viol_breaks_list
monthly_viol
# modified function
calculate_viol_breakmeans <- function(df, loessed) {
df$group <- gsub("farc_action", "FARC_actions", df$group)
df$group <- gsub("deaths_fuerzapublica", "casualties", df$group)
# which types of sentiment have breaks?
groups <- distinct(df, group)$group
# list to contain the means for each sentiment
listofmeans <- vector("list", length(groups))
# for each type of sentiment
for (i in 1:length(groups)) {
# get the breakdates for that type
breaks <- filter(df, group == groups[i])
# get the name of the type
senti_name <- groups[i]
# get the correct columns from the loess df, supplied as an argument to the function
data <- cbind(loessed["date"], loessed[senti_name])
# number of structural breaks
break_len <- length(breaks[[1]])
# IDs to return
IDs <- list(senti_name, breaks["date"])
# 2 breaks, 3 regimes
if (break_len == 2) {
data1 <- filter(data, date < breaks[1,1])
mean1 <- mean(unlist(data1[senti_name]))
data2 <- filter(data, date >= breaks[1,1], date < breaks[2,1])
mean2 <- mean(unlist(data2[senti_name]))
data3 <- filter(data, date >= breaks[2,1])
mean3 <- mean(unlist(data3[senti_name]))
means <- c(mean1, mean2, mean3)
}
listofmeans[[i]] <- list(IDs, means)
}
return(listofmeans)
}
viol_means <- calculate_viol_breakmeans(viol_breaks_list, monthly_viol)
monthly_viol["FARC_actions"]
viol_breaks_list
View(monthly_viol)
calculate_viol_breakmeans <- function(df, loessed) {
df$group <- gsub("farc_action", "FARC_actions", df$group)
df$group <- gsub("deaths_fuerzapublica", "casualties", df$group)
# which types of sentiment have breaks?
groups <- distinct(df, group)$group
# list to contain the means for each sentiment
listofmeans <- vector("list", length(groups))
# for each type of sentiment
for (i in 1:length(groups)) {
# get the breakdates for that type
breaks <- filter(df, group == groups[i])
# get the name of the type
senti_name <- groups[i]
# get the correct columns from the loess df, supplied as an argument to the function
data <- cbind(loessed["date"], loessed[senti_name])
# number of structural breaks
break_len <- length(breaks[[1]])
# IDs to return
IDs <- list(senti_name, breaks["date"])
# 2 breaks, 3 regimes
if (break_len == 2) {
data1 <- filter(data, date < breaks[1,1])
mean1 <- mean(unlist(data1[senti_name]))
data2 <- filter(data, date >= breaks[1,1], date < breaks[2,1])
mean2 <- mean(unlist(data2[senti_name]))
data3 <- filter(data, date >= breaks[2,1])
mean3 <- mean(unlist(data3[senti_name]))
means <- c(mean1, mean2, mean3)
}
listofmeans[[i]] <- list(IDs, means)
}
return(listofmeans)
}
viol_means <- calculate_viol_breakmeans(viol_breaks_list, monthly_viol)
